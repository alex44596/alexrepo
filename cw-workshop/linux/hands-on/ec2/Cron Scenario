# First check if there is crontab work assigned before

```bash
crontab -l
```

Output

```bash
no crontab for ec2-user
```
# Check your current working directory for the next steps

```bash
pwd
```
output

```bash
/home/ec2-user
```
# Create new script 'cron.sh' that creates only a new file 'file.txt' with touch command to the current working directory

```bash
touch /home/ec2-user/file.txt
```

Save and exit.

## Make this script executable. 

```bash
chmod u+x cron.sh
```
These parts are not quite related with crontab but it helps us to see how crontab works for the next steps.

# **Finally** let's create a new crontab. 

```bash
    crontab -e
```
As we know that it starts with the minute and it goes hour, day of the month, month, day of the week, username, command executed.

For the very next step, I want to execute this command every minutes. So, I will use asterisk the time date related information. For the username just use **'/bin/sh'** and for the command, use the address for the script that we created which is 'cron.sh'. It can be used bash as username

```bash
* * * * * /bin/sh /home/ec2-user/cron.sh
```

Save and exit.

# check the date with the date command

```bash
date
```
Output

```bash
Mon Jun 22 11:35:35 UTC 2020
```

Crontab will execute the script 25 seconds later based on my current time.

## Check the folders in the current directory with ls command

```bash
ls
```

Output

```bash
cron.sh
```

It probably already generated the 'file.txt' for you.


```bash
[ec2-user@ip-172----- ~]$ls
```

Output

```bash
cron.sh  file.txt
```

# In order to see the change better lets change our script file

```bash
vim cron.sh
```

Append the current date to 'file.txt' to see the changes with the file.

**Touch does not change the file, so even if it executes every minute we cannot notice that.**

```bash
touch /home/ec2-user/file.txt
date>>/home/ec2-user/file.txt
```

Save and exit.

# Wait for more than a minute and check the file

```bash
cat file.txt
```

Output after 13 minutes of waiting

```bash
Mon Jun 22 11:41:01 UTC 2020
Mon Jun 22 11:42:01 UTC 2020
Mon Jun 22 11:43:01 UTC 2020
Mon Jun 22 11:44:01 UTC 2020
Mon Jun 22 11:45:01 UTC 2020
Mon Jun 22 11:46:01 UTC 2020
Mon Jun 22 11:47:01 UTC 2020
Mon Jun 22 11:48:01 UTC 2020
Mon Jun 22 11:49:01 UTC 2020
Mon Jun 22 11:50:01 UTC 2020
Mon Jun 22 11:51:01 UTC 2020
Mon Jun 22 11:52:01 UTC 2020
Mon Jun 22 11:53:01 UTC 2020
Mon Jun 22 11:54:01 UTC 2020
```

# Check the running crontabs to see it is working

```bash
crontab -l
```
Output

```bash
* * * * * /bin/sh /home/ec2-user/cron.sh
```

# Now lets change the crontab every minute change the all asterisk sign with the every day, every hour but for every two minutes

```bash
*/2 0-23 1-31 1-12 0-6 /bin/sh /home/ec2-user/cron.sh
```

## Check the file after two minutes but the last 5 of them. It can be used tail -f

```bash
cat file.txt | tail -5
```
Output

```bash
Mon Jun 22 12:26:01 UTC 2020
Mon Jun 22 12:27:01 UTC 2020
Mon Jun 22 12:28:01 UTC 2020
Mon Jun 22 12:30:02 UTC 2020
Mon Jun 22 12:32:01 UTC 2020
```
See how it executes every two minutes. Now you can try changing dates months, hours two play more. I will skip this part for now. Because you can do a lot of different timings.


# Remove the running crontabs

```bash
crontab -r
```

Output

```bash
no crontab for ec2-user
```

**Good Job!**
